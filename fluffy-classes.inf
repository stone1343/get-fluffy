Class Person
 with
  list_together 1,
 has animate proper;

Class Girl
 class Person
 has female ~male;

Class Guy
 class Person
 has male ~female;

! Defines the Drop and Take routines for all objects, including Disappearing_Objects
Class General_Object
 with
  before [ o;
   Drop:
    move self to location;
    print "I put ";
    if (~~(location ofclass Hotel_Room)) print "down ";
    if (self ofclass Ownable_Object) print (string)self.article, " ", (name)self;
    else print (the)self;
    if (location ofclass Hotel_Room) print "on the bed";
    else {
     if (self == smartphone) print ", ", (i)"carefully";
     if ((self ofclass Disappearing_Object) && (location ofclass Public_Room)) {
      ! Timer is started in NewRoom for Disappearing_Objects which have general
      give self general;
      print ", knowing it may not be here when I return";
     }
    }
    ".";
   Take:
    if (self ofclass Token) {
     if (parent(self) == slot_machine) print (blue)"What should I do with my big jackpot?", (char)smiley;
     else {
      print (blue)"Cool, it's a";
      objectloop (o ofclass Token) {
       if (o in player) {
        print (blue)"nother";
        break;
       }
      }
      print (blue)" slot machine token! ", (char)smiley;
      ScoreFlag(self.foundFlag);
     }
    }
    else {
     print "I pick up ";
     if (self ofclass Ownable_Object) print (string)self.article, " ", (name)self;
     else print (the)self;
     print ".";
    }
    move self to player;
    if (self ofclass Disappearing_Object) {
     give self ~general;
     StopTimer(self);
    }
    new_line;
    rtrue;
  ];

! A Disappearing_Object is a special kind of object which disappears if you leave it in a Public_Room or in the slot machine tray
! Putting it down sets general, which starts the timer when player moves to a new room
! The code is actually in General_Object, not the greatest OO design
Class Disappearing_Object
 class General_Object
 with
  time_left,
  time_out [;
   give self ~general;
   remove self;
  ];

! Objects that Britney can be carrying, i.e. Tops, Room_Keys and Tokens
Class Britney_Object;

! Clothes and Room_Keys
Class Ownable_Object
 class General_Object
 with
  owner,
  initial [;
   if (self.owner == player) print "My";
   else print (string)self.article;
   print " ", (name)self;
   " is here.";
  ],
  invent [;
   ! Don't include clothes you're wearing
   if (self hasnt worn) {
    print (string)self.article, " ", (name)self;
   }
   rtrue;
  ];

Class Clothes
 class Ownable_Object
 with
  list_together 2
 has clothing;

Class Top
 class Clothes Britney_Object
 with
  before [;
   Disrobe:
    ! This is for Kaitlyn, Britney's undress is in her object definition
    if (~~(location ofclass Hotel_Room)) "I'm not gonna take my shirt off in public!";
    if (FlagOff(PLAYER_HAS_SEEN_TEXT)) "I decide not to listen to a voice in my head that suggests something inappropriate.";
    DisrobeTop(actor, noun);
    rtrue;
   Wear:
    WearTop(actor, noun);
    rtrue;
  ];

Class Pants
 class Clothes
 with
  before [;
   Disrobe: print_ret (preformatted)"This is not that kind of game!";
  ];

! i.e. bras
Class Lingerie
 class Clothes
 with
  before [;
   Disrobe: print_ret (preformatted)"Keep it PG-13!";
  ];

Class Room_Key
 class Disappearing_Object Britney_Object Ownable_Object
 with
  description "It has the hotel's logo, but no room number.",
  list_together 3,
  key_to_room;

Class Token
 class Disappearing_Object Britney_Object
 with
  initial [;
   "Check it out, there's a ", (address)self.&name-->0, " token over there!";
  ],
  description [;
   "It looks like a ", (address)self.&name-->0, " coin but it's not ", (address)self.&name-->0, " and it's not a coin.";
  ],
  foundFlag;

! Dynamically-created photos
Class Photograph(MAX_PHOTOGRAPHS)
 with
  number,
  subject,
  wearing_top,
  description [;
   ! Photogaphs can only be of Fluffy, Kaitlyn, Britney, Igor or the laptop
   switch (self.subject) {
    fluffy:
     ScoreFlag(PLAYER_SAW_PHOTO_OF_FLUFFY);
     print "It's Fluffy, he's s-o-o-o cute, I ";
     if (FlagOn(PLAYER_HAS_SEEN_TEXT)) print "hope I get him back safe soon!!!";
     else print "love him so much!!!";
    kaitlyn:
     print "It's a picture of me in a ";
     if (self.wearing_top) print (name)self.wearing_top;
     else print "bra";
     print " and skinny jeans.";
     if ((self.wearing_top ~= nothing)) print " It's a cute outfit, isn't it?";
    britney:
     print "It's a picture of Britney, looking good in a ";
     if (self.wearing_top) print (name)self.wearing_top;
     else print "bra";
     print " and yoga pants.";
    igor: print "It's a photo of Igor.";
    laptop:
     if (FlagOn(PLAYER_KNOWS_WHERE_FLUFFY_IS)) print "It's the Russian email saying that Fluffy is in the basement.";
     else print "The laptop has a message that I can't understand.";
   }
  ],
  create [ o;
   ! The text is printed in PhotographSub
   self.number = MAX_PHOTOGRAPHS - Photograph.remaining();
   ! You can only photogaph Kaitlyn, Britney, Igor or the laptop
   self.subject = o;
   if (o == player or britney) {
    self.wearing_top = o.wearing_top;
    if (self.wearing_top == nothing) SetFlag(PLAYER_TOOK_TOPLESS_PHOTO);
   }
   if (o == laptop) SetFlag(PLAYER_HAS_PHOTOGRAPHED_LAPTOP);
  ]
 has static;

! Smartphone icons on the Home screen
Class Icon
 with
  mode,
  label,
  description [;
   print_ret "It's an icon labeled ", (string)self.label, ".";
  ],
  before [;
   Push, Touch:
    print "I ";
    if (smartphone notin player) {
     move smartphone to player;
     print "picked up my smartphone and";
    }
    smartphone.change_mode(self.mode);
    "selected ", (string)self.label, ".";
  ]
 has static;

! The rest of the classes are for the map/rooms

Class Button
 with
  before [;
   Push, Touch: "It beeps quietly when you push it.";
  ]
 has scenery;

Class Elevator_Button
 class Button
 with
  before [ ;
   Push, Touch:
    if (elevator.floor_number == self.destination_floor) "Nothing happens.";
    ! The elevator buttons don't get listed from now on because you've probably figured the elevator out
    give elevator_buttons scenery;
    elevator.floor_number = self.destination_floor;
    "The doors close, you feel the elevator moving for a few seconds and the doors open again.";
  ],
  destination_floor
 has scenery;

Class Bunch_Of_Buttons
 with
  before [;
   Push, Touch: "You can't push them all.";
  ]
 has transparent static;

Class Basic_Door
 with
  description [;
   print "It is ";
   if (self hasnt open) "closed.";
   "open.";
  ],
  before [;
   Knock:
    "You knock on the door, but nothing happens.";
  ]
 has static scenery door openable lockable;

! A door which is always locked from the outside and shuts when you go through it
Class Hotel_Room_Door
 class Basic_Door
 with
  when_closed [;
   if (location ofclass Hall) "It's a normal hotel room door.";
   "It has a floor plan including fire escape route.";
  ],
  when_open [;
   if (location ofclass Hall) "The door to the room is open.";
   "The door to the hall is open.";
  ],
  door_to [;
   if (location ofclass Hall) return self.to_room;
   return self.to_hall;
  ],
  to_room,
  to_hall,
  door_dir [;
   if (location == self.to_hall) return self.dir_in;
   return self.dir_out;
  ],
  dir_in,
  dir_out,
  with_key [ o;
   objectloop (o ofclass Room_Key) {
    if (o in player) {
     if (o.key_to_room == self.to_room) return o;
    }
   }
   return master_key;
  ],
  before [ o;
   Knock:
    if (location ofclass Hall) {
     objectloop (o ofclass Person) {
      if (parent(o) == self.to_room) {
       give self ~locked open;
       StartTimer(self, 1);
       "From inside the room, I hear ~Coming!~, then the door swings open.";
      }
     }
     "I knock on the door, but nothing happens.";
    }
    ! If knocking on the door from the inside...
    "I kind of pointlessly knock on the door.";
   Unlock:
    if (location ofclass Hall) {
     print "I ";
     if (~~(second == master_key || ((second provides key_to_room) && (second.key_to_room == self.to_room)))) "can't unlock the door with this.";
     give self ~locked;
    ! Restart the timer
    StopTimer(self);
    StartTimer(self, 1);
     "insert the key in the door lock thingy, and a green light clicks on.";
    }
   Open:
    print "I ";
    if (location ofclass Hall) {
     if (self has locked) {
      if (~~ActorHasKeyForDoor(player, self)) "can't open the door without a key.";
      print "unlock and ";
      give self ~locked;
     }
    }
    give self open;
    ! Restart the timer
    StopTimer(self);
    StartTimer(self, 1);
    "open the door.";
   Go:
    print "I ";
    if (self hasnt open) {
     if (location ofclass hall) {
      if (self has locked) {
       if (~~ActorHasKeyForDoor(player, self)) "can't enter the room without a key.";
       give self ~locked;
       print "insert the key, ";
      }
     }
     give self open;
     print "open the door and ";
    }
    if (location ofclass hall) print "enter";
    else print "exit";
    ! Can leave a hanging comma here because the 'after' will finish the sentence
    print " the room,";
    ! Must not return true, because that stops everything, which we really can't do for this action!
  ],
  after [;
   Go:
    StopTimer(self);
    give self ~open;
    if (location ofclass Hall) give self locked;
    move k_boobs to location;
    ! Must not return true, because that stops everything, which we really can't do for this action!
    print " the door swings shut behind me.^";
  ],
  time_left,
  time_out [;
   if (location ofclass Hall) {
    if (self has open) {
     give self locked ~open;
     print "The door to ", (name)self.to_room, " swings shut.^";
    } else {
     give self locked;
     print "The green light on the door to ", (name)self.to_room, " clicks off.^";
    }
   } else {
    if (self has open) {
     give self ~open;
     print "The door swings shut.^";
    }
   }
  ]
 has ~open locked proper;

Class Room
 with
  description [;
   rtrue;
  ],
  cant_go [;
   SmartCantGo();
  ],
  each_turn [;
   if (end_time ~= nothing) {
    ! Out of time ;-(
    if ((end_time - glk_current_simple_time(60)) <= 0) deadFlag = 6;
   }
  ]
 has light;

Class Public_Room
 class Room;

Class Hall
 class Public_Room
 with
  description [;
   if (self hasnt visited) "I see doors numbered ", self.floor_number, "01 through ", self.floor_number, "07.";
   rtrue;
  ],
  floor_number,
  e_to [;
   if (elevator_doors hasnt open) "The elevator must be at a different floor.";
   return elevator;
  ];

Class Hotel_Room
 class Room
 with
  !initial "Why do I have to add this again, haven't I debugged this enough???",
  !description [;
  ! if (self hasnt visited) "According to the floor plan on the back of the door, I'm in ", (name)self, ".";
  ! rtrue;
  !],
  door_out,
  floor_number,
  room_number,
  before [;
   Drop:
    move noun to location;
    if (noun == telephone) "I put the receiver back on the hook.";
    "I put ", (string)noun.article, " ", (name)noun, " on the bed.";
   Exit:
    <<Enter self.door_out>>;
   Go:
    if (telephone in player) "I'm still holding the house phone, it's one of those old-fashioned ones with a cord.";
    if (player.wearing_top == nothing) "I think about walking out of the room, but I should get dressed first.";
    if ((britney in location) && (britney.is_following) && (britney.wearing_top == nothing)) print_ret (BritneysVoice)"Hang on, I'm not walking out of here dressed like this!";
    if (self.door_out hasnt open) give self.door_out open;
  ]
 has scenery proper;
